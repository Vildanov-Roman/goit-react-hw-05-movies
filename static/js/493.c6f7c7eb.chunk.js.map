{"version":3,"file":"static/js/493.c6f7c7eb.chunk.js","mappings":"8NAIaA,EAAYC,EAAAA,GAAAA,GAAH,0GAOTC,EAAYD,EAAAA,GAAAA,GAAH,waAiBTE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,2KAaTI,EAAkBJ,EAAAA,GAAAA,KAAH,0C,SC/BfK,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACT,EAAD,UACGO,GACCA,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,YAApB,OACT,SAACZ,EAAD,WACE,UAACC,EAAD,CAAWY,GAAE,kBAAaJ,GAAMK,MAAO,CAAER,SAAAA,GAAzC,UACGM,GACC,gBACEG,IAAG,yCAAoCH,GACvCI,IAAKL,EACLM,MAAM,MACNC,OAAO,SAGT,gBAAKH,IAAKI,EAAOH,IAAKN,EAAMO,MAAM,MAAMC,OAAO,SAEjD,SAACf,EAAD,UAAkBO,GAAQC,QAZdF,EADP,KAmBlB,C,4ECND,UAxBa,WACX,OAA0CW,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAYA,OAVAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GACJJ,EAAiBI,EAClB,IACAC,OAAM,YAAkB,IAAfC,EAAc,EAAdA,QACRC,QAAQC,IAAIF,EACb,GACJ,GAAE,IAEEP,GAKH,0BACE,SAAC,IAAD,CAAYhB,OAAQgB,OALf,wCAQV,C,4LCrBKU,EAAWC,EAAAA,GAAAA,OAAa,CAAEC,QAAS,kCAC5BT,EAAW,mCAAG,oGACFO,EAASG,IALZ,qBAK+B,CACjDC,OAAQ,CAAEC,QAAS,sCAFI,cACnBV,EADmB,yBAIlBA,EAASW,KAAKC,SAJI,2CAAH,qDAOXC,EAAkB,mCAAG,WAAMC,GAAN,uFACTT,EAASG,IAAT,WAXP,gBAWqC,CACnDC,OAAQ,CACNC,QAAS,mCACTK,MAAOD,KAJqB,cAC1Bd,EAD0B,yBAOzBA,EAASW,KAAKC,SAPW,2CAAH,sDAUlBI,EAAe,mCAAG,WAAMjC,GAAN,uFACNsB,EAASG,IAAT,iBAAuBzB,GAAM,CAClD0B,OAAQ,CACNC,QAAS,sCAHgB,cACvBV,EADuB,yBAMtBA,EAASW,MANa,2CAAH,sDASfM,EAAiB,mCAAG,WAAMlC,GAAN,uFACRsB,EAASG,IAAT,iBAAuBzB,EAAvB,YAAqC,CAC1D0B,OAAQ,CACNC,QAAS,sCAHkB,cACzBV,EADyB,yBAMxBA,EAASW,MANe,2CAAH,sDASjBO,EAAoB,mCAAG,WAAMnC,GAAN,uFACXsB,EAASG,IAAT,iBAAuBzB,EAAvB,YAAqC,CAC1D0B,OAAQ,CACNC,QAAS,sCAHqB,cAC5BV,EAD4B,yBAM3BA,EAASW,MANkB,2CAAH,qD","sources":["components/Movies/MoviesList.style.js","components/Movies/MoviesList.jsx","components/pages/Home.jsx","components/servise/serviseAPI.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\n\nexport const MovieList = styled.ul`\n  display: flex;\n  gap: 15px;\n  flex-wrap: wrap;\n  justify-content: center;\n  `\n\nexport const MovieItem = styled.li`\n  transition: 0.1s ease;\n  box-shadow: 0px 3px 3px 3px rgba(0, 0, 0, 0.7);\n\n    :hover,\n    :focus {\n      transform: translateY(2px);\n  box-shadow: 0px 7px 8px -5px rgba(0, 0, 0, 0.2),\n    0px 8px 9px 0px rgba(0, 0, 0, 0.14), 0px 5px 15px 0px rgba(0, 0, 0, 0.12);\n    }\n\n    :active {\n      transform: translateY(8px);\n      box-shadow: inset 0px 0px 3px 4px rgba(0, 0, 0, 0.5);\n    }\n`\n\nexport const MovieLink = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  width: 150px;\n\n  :hover,\n  :fokus {\n    color: red;\n  }\n`\n\nexport const LinkDescription = styled.span`\n  padding: 10px;\n`\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport image from '../../img/no_poster.jpg';\nimport {\n  MovieList,\n  MovieItem,\n  MovieLink,\n  LinkDescription,\n} from './MoviesList.style';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <MovieList>\n      {movies &&\n        movies.map(({ id, name, title, poster_path }) => (\n          <MovieItem key={id}>\n            <MovieLink to={`/movies/${id}`} state={{ location }}>\n              {poster_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                  alt={title}\n                  width=\"150\"\n                  height=\"200\"\n                />\n              ) : (\n                <img src={image} alt={name} width=\"150\" height=\"200\" />\n              )}\n              <LinkDescription>{name || title}</LinkDescription>\n            </MovieLink>\n          </MovieItem>\n        ))}\n    </MovieList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      name: PropTypes.string,\n      title: PropTypes.string,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { moviesFetch } from '../servise/serviseAPI';\nimport { MoviesList } from 'components/Movies/MoviesList';\n\nconst Home = () => {\n  const [trendingFilms, setTrendingFilms] = useState([]);\n\n  useEffect(() => {\n    moviesFetch()\n      .then(response => {\n        setTrendingFilms(response);\n      })\n      .catch(({ message }) => {\n        console.log(message);\n      });\n  }, []);\n\n  if (!trendingFilms) {\n    return <p>404 Not Found</p>;\n  }\n\n  return (\n    <div>\n      <MoviesList movies={trendingFilms} />\n    </div>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst trandingMovie = 'trending/movie/day';\nconst nameMovie = 'search/movie';\n\nconst movieApi = axios.create({ baseURL: 'https://api.themoviedb.org/3/' });\nexport const moviesFetch = async () => {\n  const response = await movieApi.get(trandingMovie, {\n    params: { api_key: 'fe8296f47fdee638ac9cbbf0db61e69d' },\n  });\n  return response.data.results;\n};\n\nexport const searchMoviesByName = async searchQuery => {\n  const response = await movieApi.get(`/${nameMovie}`, {\n    params: {\n      api_key: 'f9515d5c748130764d8b19c2d2137bc3',\n      query: searchQuery,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searchMovieById = async id => {\n  const response = await movieApi.get(`/movie/${id}`, {\n    params: {\n      api_key: 'f9515d5c748130764d8b19c2d2137bc3',\n    },\n  });\n  return response.data;\n};\n\nexport const searchMovieByCast = async id => {\n  const response = await movieApi.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: 'f9515d5c748130764d8b19c2d2137bc3',\n    },\n  });\n  return response.data;\n};\n\nexport const searchMovieByReviews = async id => {\n  const response = await movieApi.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: 'f9515d5c748130764d8b19c2d2137bc3',\n    },\n  });\n  return response.data;\n};\n"],"names":["MovieList","styled","MovieItem","MovieLink","Link","LinkDescription","MoviesList","movies","location","useLocation","map","id","name","title","poster_path","to","state","src","alt","width","height","image","useState","trendingFilms","setTrendingFilms","useEffect","moviesFetch","then","response","catch","message","console","log","movieApi","axios","baseURL","get","params","api_key","data","results","searchMoviesByName","searchQuery","query","searchMovieById","searchMovieByCast","searchMovieByReviews"],"sourceRoot":""}